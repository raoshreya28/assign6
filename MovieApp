//Movie.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;


namespace MovieAppList
{
    public class Movie
    {
        public int id { get; set; }
        public string name { get; set; }
        public string genre { get; set; }
        public int year { get; set; }

        public Movie(int id, string name, string genre, int year)
        {
            this.id = id;
            this.name = name;
            this.genre = genre;
            this.year = year;
        }
        public override string ToString()
        {
            return $"The id id {id}, movie name is {name}, genre is {genre} and year is {year}";
        }

    }

    public class MaxMovieException : Exception
    {
        public MaxMovieException(string message) : base(message)
        { }

    }
    public class MovieNotFoundException : Exception 
    {
        public MovieNotFoundException(string message) : base(message) { }
    }

    public class NoMoviesAvailableException : Exception 
    {
        public NoMoviesAvailableException(string message) : base(message) { }
    }
}

//Program.cs
using System.Text.Json;
using System.Text.Json.Serialization;


namespace MovieAppList
{
    internal class Program
    {
        public static List<Movie> movie = MovieSerializer.Load();


        public static void Add()
        {
            try
            {
                if (movie.Count >= 5)
                {
                    throw new MaxMovieException("Max number of movies reached.");
                }

                Console.WriteLine("Enter id:");
                int id = Convert.ToInt32(Console.ReadLine());

                Console.WriteLine("Enter movie name:");
                string name = Console.ReadLine();

                Console.WriteLine("Enter the genre:");
                string genre = Console.ReadLine();

                Console.WriteLine("Enter year:");
                int year = Convert.ToInt32(Console.ReadLine());

                movie.Add(new Movie(id, name, genre, year));
                Console.WriteLine("Movie added successfully.");
                MovieSerializer.Save(movie);
            }
            catch (MaxMovieException ex)
            {
                Console.WriteLine("Limit Error: " + ex.Message);
            }




        }
        public static void Display() 
        {
            if (movie.Count >0) 
            {
                Console.WriteLine("Displaying all the movies");
                for (int i = 0; i < movie.Count; i++)
                {

                    Console.WriteLine(movie[i]);

                }


            }
            else 
            {
                Console.WriteLine("No movies to display");
            }
            
       
        }
        public static void FindMovie()
        {
            try
            {
                Console.WriteLine("Enter the ID to find the movie:");
                int newid = Convert.ToInt32(Console.ReadLine());

                bool found = false;

                for (int i = 0; i < movie.Count; i++)
                {
                    if (movie[i].id == newid)
                    {
                        Console.WriteLine("Movie found:");
                        Console.WriteLine(movie[i]);
                        found = true;
                        break;
                    }
                }

                if (!found)
                {
                    throw new MovieNotFoundException("No movie found with the given ID.");
                }
            }
            catch (MaxMovieException ex)
            {

                Console.WriteLine("Limit Error: " + ex.Message);

            }
        }


        public static void ClearAll()
        {
            try 
            {
                if (movie.Count == 0)
                {
                    throw new NoMoviesAvailableException("No movies to clear");
                }
                Console.WriteLine("Clearing all records");
                movie.Clear();
                MovieSerializer.Save(movie);

            }catch(NoMoviesAvailableException ex) 
            {
                Console.WriteLine("Exception " +ex.Message);
            }



        }
        public static void RemoveMovie()
        {
            try
            {
                if (movie.Count == 0)
                {
                    throw new MovieNotFoundException("Invalid Id Exception");
                }
                Console.WriteLine("Enter the id of the movie");
                int removeid = Convert.ToInt32(Console.ReadLine());
                for (int i = 0; i < movie.Count; i++)
                {
                    if (movie[i].id == removeid)
                    {
                        movie.RemoveAt(i);
                        Console.WriteLine("Movie removed successfully");
                    }

                }

            }
            catch (MaxMovieException ex) 
            {
                Console.WriteLine("Invalid Id Exception"+ex.Message);
            }
            
        
        }

        static void Main(string[] args)
        {
            int choice;
            do
            {
                Console.WriteLine("--------Movie Menu-------");
                Console.WriteLine("1.Add movies");
                Console.WriteLine("2.Display movies");
                Console.WriteLine("3.Find movie by id");
                Console.WriteLine("4.Remove movie by id");
                Console.WriteLine("5.Clear All");
                Console.WriteLine("6.Exit");
                
                

                Console.WriteLine("Enter your choice");
                choice = Convert.ToInt32(Console.ReadLine());

                switch (choice) 
                {
                    case 1:
                        Add();
                        break;
                    case 2:
                        Display();
                        break;
                    case 3:
                         FindMovie();
                        break;
                    case 4:
                        RemoveMovie();
                        break;
                    case 5:
                        ClearAll();
                        break;
                    case 6:
                        Console.WriteLine("Exiting....");
                        break;
                    default:
                        Console.WriteLine("Enter a valid choice");
                        break;

                
                
                
                
                }

            } while (choice != 6);
        }
    }
}

//MovieSerializer.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

namespace MovieAppList
{
    public static class MovieSerializer
    {
        private static string filePath = "C:\\Users\\shreya.rao\\Documents\\Practice\\MovieAppList\\MovieAppList\\bin\\Debug\\net8.0\\movies.json";

        public static void Save(List<Movie> movieList)
        {
            try
            {
                string json = JsonSerializer.Serialize(movieList, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(filePath, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error while saving: " + ex.Message);
            }
        }

        public static List<Movie> Load()
        {
            try
            {
                if (File.Exists(filePath))
                {
                    string json = File.ReadAllText(filePath);
                    return JsonSerializer.Deserialize<List<Movie>>(json) ?? new List<Movie>();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error while loading: " + ex.Message);
            }

            return new List<Movie>(); // Return empty if not found or failed
        }
    }
}
