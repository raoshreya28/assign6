//Product.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShoppingCart
{
    public class Product
    {
        public int id { get; set; }
        public string name { get; set; }
        public double price { get; set; }
        public double discountPercent { get; set; }

        public Product(int id, string name, double price, double discountPercent)
        {
            this.id = id;
            this.name = name;
            this.price = price;
            this.discountPercent = discountPercent;
        }

        public double calculateDiscountedPrice()
        {
            return price - (price * discountPercent / 100);
        }
    }

}
//LineItem.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShoppingCart
{
    public class LineItem
    {
        public int id { get; set; }
        public int quantity { get; set; }
        public Product product { get; set; }

        public LineItem(int id, int quantity, Product product)
        {
            this.id = id;
            this.quantity = quantity;
            this.product = product;
        }

        public double calculateLineItemCost()
        {
            return quantity * product.calculateDiscountedPrice();
        }
    }

}
//Order.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShoppingCart
{
    public class Order
    {
        public int id { get; set; }
        public DateTime date { get; set; }
        public List<LineItem> items { get; set; }

        public Order(int id, DateTime date)
        {
            this.id = id;
            this.date = date;
            this.items = new List<LineItem>();
        }

        public void addItem(LineItem item)
        {
            items.Add(item);
        }

        public double calculateOrderPrice()
        {
            double total = 0;
            foreach (var item in items)
            {
                total =total+ item.calculateLineItemCost();
            }
            return total;
        }
    }

}
//Customer.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShoppingCart
{
    public class Customer
    {
        public int id { get; set; }
        public string name { get; set; }
        public List<Order> orders { get; set; }

        public Customer(int id, string name)
        {
            this.id = id;
            this.name = name;
            this.orders = new List<Order>();
        }

        public void addOrder(Order order)
        {
            orders.Add(order);
        }
    }

}
//Program.cs
namespace ShoppingCart
{
     public class Program
    {
        static void Main(string[] args)
        {
            Product p1 = new Product(1, "Laptop", 50000, 10);
            Product p2 = new Product(2, "Mouse", 1000, 5);
            Product p3 = new Product(3, "Keyboard", 1500, 8);
            Product p4 = new Product(4, "Monitor", 12000, 12);

            // ----------- Customer 1--------------
            LineItem l1 = new LineItem(1, 1, p1); 
            LineItem l2 = new LineItem(2, 2, p2); 

            Order o1 = new Order(101, DateTime.Now);
            o1.addItem(l1);
            o1.addItem(l2);

            Customer c1 = new Customer(1, "shreya");
            c1.addOrder(o1);

            // ----------- Customer 2----------------
            LineItem l3 = new LineItem(3, 1, p3); 
            LineItem l4 = new LineItem(4, 1, p4); 

            Order o2 = new Order(102, DateTime.Now);
            o2.addItem(l3);
            o2.addItem(l4);

            Customer c2 = new Customer(2, "rahul");
            c2.addOrder(o2);

            

            DisplayCustomerCart(c1);
            Console.WriteLine("\n");
            DisplayCustomerCart(c2);
        }

        static void DisplayCustomerCart(Customer customer)
        {
            Console.WriteLine("Customer: " + customer.name);
            foreach (var order in customer.orders)
            {
                Console.WriteLine($"Order ID: {order.id}  Date: {order.date.ToShortDateString()}");
                Console.WriteLine("--------------------------------------------------");
                Console.WriteLine("ID Name  Quantity  Unit Price  Total");
                Console.WriteLine("--------------------------------------------------");

                foreach (var item in order.items)
                {
                    Console.WriteLine($"{item.id}   {item.product.name}     {item.quantity}    {item.product.calculateDiscountedPrice():0.00}    {item.calculateLineItemCost():0.00}");
                }

                Console.WriteLine("--------------------------------------------------");
                Console.WriteLine($"Total Order Price: {order.calculateOrderPrice():0.00}");
                Console.WriteLine("--------------------------------------------------");
            }
        }
    }

}
